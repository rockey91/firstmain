{"version":3,"sources":["Login.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleChange","event","setState","target","id","value","handleSubmit","form","username","password","bind","AmazonCognitoIdentity","require","global","fetch","authenticationData","Username","Password","authenticationDetails","AuthenticationDetails","userData","Pool","CognitoUserPool","UserPoolId","ClientId","CognitoUser","authenticateUser","onSuccess","result","accessToken","getAccessToken","getJwtToken","console","log","login","onFailure","err","alert","message","JSON","stringify","preventDefault","state","email","this","length","className","onSubmit","Group","controlId","Control","autoFocus","type","placeHolder","onChange","block","disabled","validateForm","Component","App","items","xmlHttp","XMLHttpRequest","dt","Date","staticURL","getFullYear","getMonth","getDate","open","send","parse","responseText","articles","getNewsArticles","map","item","index","urlToImage","key","src","alt","title","description","source","name","publishedAt","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2ea5bd3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button';\r\nimport App from './App';\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      login : true,\r\n    };\r\n  }\r\n\r\n  validateForm() {\r\n    return this.state.email.length > 0 && this.state.password.length > 0;\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = event => {\r\n\r\n    var form = event.target;\r\n    var username = form[0].value;\r\n    var password = form[1].value;\r\n\r\n    // var username = 'rockey91@gmail.com';\r\n    // var password = 'rockey91@FM';\r\n\r\n    var setState = this.setState.bind(this);\r\n\r\n    // AWS Code\r\n\r\n    const AmazonCognitoIdentity = require('amazon-cognito-identity-js');\r\n    global.fetch = require('node-fetch');\r\n\r\n    var authenticationData = {\r\n      Username : username,\r\n      Password : password\r\n    };\r\n\r\n    var authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails(authenticationData);\r\n\r\n    var poolData = {\r\n      UserPoolId : 'us-east-2_DNSoeZiN6', // Your user pool id here\r\n      ClientId : '3esc1a8nj75d62lmuqgpqntakf', // Your client id here\r\n    };\r\n\r\n    var userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\r\n\r\n    var userData = {\r\n      Username : username,\r\n      Pool : userPool,\r\n    };\r\n\r\n    var cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);\r\n\r\n    cognitoUser.authenticateUser(authenticationDetails, {\r\n      onSuccess: function (result) {\r\n        var accessToken = result.getAccessToken().getJwtToken();\r\n        console.log(accessToken);\r\n\r\n        setState({\r\n          login: false\r\n        });\r\n\r\n      },\r\n      onFailure: function(err) {\r\n        alert(err.message || JSON.stringify(err));\r\n      },\r\n      // newPasswordRequired: function (userAttributes) {\r\n      //   delete userAttributes.email_verified;\r\n      //   cognitoUser.completeNewPasswordChallenge('rockey91@FM', userAttributes, this);\r\n      // }\r\n    });\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.state.login === true ? <div className=\"Login\">\r\n      <Form onSubmit={this.handleSubmit}>\r\n      <Form.Group controlId=\"email\">\r\n      <Form.Control\r\n      autoFocus\r\n      type=\"email\"\r\n      placeHolder=\"Username/Email\"\r\n      value={this.state.email}\r\n      onChange={this.handleChange}\r\n      />\r\n      </Form.Group>\r\n      <Form.Group controlId=\"password\">\r\n      <Form.Control\r\n      value={this.state.password}\r\n      placeHolder=\"Password\"\r\n      onChange={this.handleChange}\r\n      type=\"password\"\r\n      />\r\n      </Form.Group>\r\n      <Button\r\n      block\r\n      disabled={!this.validateForm()}\r\n      type=\"submit\"\r\n      >\r\n      Login\r\n      </Button>\r\n      </Form>\r\n      </div> : <App />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nfunction getNewsArticles() {\n  var xmlHttp = new XMLHttpRequest(), dt = new Date(),\n  staticURL = \"https://newsapi.org/v2/everything?q=bitcoin&from=\"+ ( dt.getFullYear() + \"-\" + dt.getMonth() + \"-\" + dt.getDate() ) +\"&sortBy=publishedAt&apiKey=55d26a8944ee4ee9b4c23a5ae556d1ac\";\n  xmlHttp.open( \"GET\", staticURL, false ); // false for synchronous request\n  xmlHttp.send( null );\n  return JSON.parse(xmlHttp.responseText).articles;\n}\n\nclass App extends React.Component {\n  render() {\n    var items = getNewsArticles().map((item, index) => {\n      if ( item.urlToImage )\n      return (\n        <div key={index} className=\"feed_container\">\n          <div className=\"feed_image\">\n            <img src={item.urlToImage} alt=\"Thumbnail\" />\n          </div>\n          <div className=\"feed_text_container\">\n            <h3 className=\"feed_title\">{item.title}</h3>\n            <p className=\"feed_text\">{item.description}</p>\n            <p className=\"feed_source\">{item.source.name} - {item.publishedAt}</p>\n          </div>\n        </div>\n      );\n      return undefined;\n    });\n    return (\n      <div className=\"root_container\">\n        <h1 className=\"news_feed_header\">Newsfeed</h1>\n        <div className=\"main_container\">{items}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Login from './Login';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Login />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}